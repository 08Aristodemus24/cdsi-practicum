

time mark:

topics:
learn what you need to know then study those that you vaguely know because of time restriction deply


to extend a prebuilt in this case menu we can do it by right clicking a pre built menu in the AOT, and clicking create extension
menu artifacts
drag the created menu in the resources folder of the newly extended menu
and under dragged menu we drag under it our created menu items
a menu item button is like a navbar link or a navigation link maybe navbars in general are just menus 
clicking the run button in the IDE will launch the server that will locally host our application

Learning fast:
try to watch the videos so you can have already knowledge on what the instructors are doing 
know what they discuss
look up what they discuss in the documentation because it si bound to be there
read it and get the knowledge that you can
then watch the videos again and see how they implement it, there is no need to read what is in the videos
code along with your own version
screenshot your code and save it with doodles for side notes




default dashboard link:
https://usnconeboxax1aos.cloud.onebox.dynamics.com/?cmp=rlc&mi=DefaultDashboard





Protocols:
1. everytime a table, data entity, report, changes sync db via dynamics 365 menu and via solution explorer
2. everytime we need a package udpate our model parameters
3. everytime a report changes clean, build, and then deploy. If report does not work try to restart SSRS service in the services application
4. everytime data entity is created go to data management > framework parameters > entity settings > refresh entity list. If data entity list refresh does not work try to restart Microsoft Dynamics 365 unified operations: data import export framework service
5. everytime an exported data entity is edited go to data management > data entities > select exported data entity > modify target mapping > generate target mapping 



Form Extensions:
-extend the FMRental form by importing it again in our project and searching it in the AOT, and create an extension of it in our project
-because we created an extension earlier of the FMRental table (correction the VendTable table) the field which is vehicle id would have been added and the relation it had to our DBFMVehicleTableTest
-we add this field to a sub pattern "info group" under the main pattern "tab details" in our design pattern tab 
-we add another data source, which will be our DBFMVehicleTableTest and set this new data source, join source property to the FMRental datasource, its allow create, delete, insert at end and edit to no
-drag the field group identification of our data source DBFMVehicleTableTest to the "tab details" > "line view" > "line view tab" > "line view header"


Activity 6:
-extend All Vendors form
-add the vehicle id field on the grid and place beside the name field of the allvendors form
-add vehicle id and VIN on invoice and delivery > delivery. After destination code
-display most recent service start date (from DBFMVehicleMaintenance) of vehicle next to VIN
-VIN must not be editable


DAY 6
unknown methods and classes:

SrsReportRunController
SysOperationContractProcessingAttribute(classStr(DBFMVehicleMaintenanceUIBuilder))
rpt_ctrlr.parmReportName(ssrsReportStr(DBFMVehiclMaintenanceReport, DBFMVehicleMaintenanceReportDesign));
rpt_ctrlr.parmDialogCaption("<some caption>");
rpt_ctrlr.parmArgs(_args)
rpt_ctrlr.startOperation()
this.parmReportContract().parmRdpContract()
this.parmArgs().dataset()
this.parmArgs()
tableNum(DBFMVehicleMaintenanceTable)
this.parmArgs().record() as DBFMVehicleMaintenanceTable;
this.prePromtModiifyContract()

[SrsReportParameterAttribute(classStr(DBFMVehicleMaintenanceContract))]
SrsReportDataProviderPreProcessTempDB
this.parmDataContract() as DBFMVehicleMaintenanceContract;
this.processReport()
[SrsReportDatasetAttribute(tableStr(DBFMVehicleMaintenanceReportTable))]


[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(DBFMVehicleMaintenanceUIBuilder))
]
[
        DataMemberAttribute('VehicleId'),
        SysOperationLabelAttribute('Vehicle Id')
    ]

[
        DataMemberAttribute('ReleaseDate'),
        SysOperationLabelAttribute('Release Date')
    ]

Dialog dialog = new Dialog("Create new customer");
DialogField df_cust_acc = Dialog.addField(extendedTypeStr(CustVendAC), "Account number");
df_cust_acc.value();

cust_table.validateWrite()
cust_table.insert()

[ExtensionOf(tableStr(CustTable))]
this.insert(DirPartyType _partyType, Name _name, boolean _updateCRM)
str2Int(this.creditRating)

[DataEventHandler(tableStr(CustTable), DataEventType::Inserting)]
this.CustTable_onInserting(Common sender, DataEventArgs e)

[FormEventHandler(formStr(FMRental), FormEventType::Initialized)]
public static void FMRental_OnInitialized(xFormRun sender, FormEventArgs e)
FormRun form_run = sender;
FormControl fmrental_state_copy_1 = form_run.design().controlName(formControlStr(FMRental, FMRental_StateCopy1));
fmrental_state_copy_1.valueStr()
fmrental_state_copy_1.enabled(false)

[FormControlEventHandler(formControlStr(FMRental, FMRental_StateCopy1), FormControlEventType::Modified)]
public static void FMRental_StateCopy1_OnModified(FormControl sender, FormControlEventArgs e)
sender.valueStr()
sender.enabled(false)

[FormDataSourceEventHandler(formDataSourceStr(FMRental, FMRental), FormDataSourceEventType::Activated)]
public static void FMRental_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
FormRun form_run = sender.formRun();
FormControl fmrental_state_copy_1 = form_run.design().controlName(formControlStr(FMRental, FMRental_StateCopy1));
FormControl fmrental_state_copy_1 = form_run.design().controlName(formControlStr(FMRental, FMRental_StateCopy1));
FormDataObject fm_rental_state = sender.object(fieldNum(FMRental, State));
fm_rental_state.enabled(fm_rental.State != FMReservationState::Complete);

[FormDataFieldEventHandler(formDataFieldStr(FMRental, FMRental, State), FormDataFieldEventType::Modified)]
public static void State_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
anytype field_val = sender.getValue();
sender.enabled(sender.getValue() != FMReservationState::Complete);

[FormDataSourceEventHandler(formDataSourceStr(VendTable, VendTable), FormDataSourceEventType::Activated)]
public static void VendTable_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
VendTable vend_table = sender.cursor();
FormDataObject vend_table_fzone = sender.object(fieldNum(VendTable, FreightZone));
vend_table_fzone.enabled(!vend_table.FreightZone);

[ExtensionOf(tableStr(VendTable))]
public void initValue()
[SysClientCacheDataMethodAttribute(true)]




Reports (sql server reporting service)
-advantage of it is, it is built-in back-office document management capabilities
-another advantage is that precision documents to comply with local regulatory business practices
-parameterized views and drill-through navigations to other AX pages and other reports

Financial reporting
-22 default financial reports are available that can be overridden
-users can edit or create new reports
-requires the proper privileges and duties

Report contract class
-report class defines parameters to the ssrs report

Report UIBuilder class
-add any type of fields

Report controller class
-modifying a report query based on the ipnput data
-modifying report contract data based on the in data
-control a report parameters dialog
-to create extend SrsReportRunController class

Report data provider class (RDP)
-RDP is the data source type when we add a new dataset to the report in VS
-RDP is a class that executes the business logic process the data and returns a dataset which is rendered/shown in the report
-cannot directly use a query to access the data from the database
-data has to prepare on teh basis of business logic

-consider page layout page size margins if it is pre-printed or free form when creating a report forom scratch
-pre-printed reports - already ahve a printed form layout

-create temporary table
-create contract class
-create report data provider class
-create report and report design (report needs to be deployed)
-create controller class
-create output menu item
-run report



-add a query property value to the dataset nodes element we created which is DBFMVehicleReportDS
-add new precision design under the precision design node of the report
-in the newly added precision design node right click and click edit using designer which will open up another tab where we can design the report layout shown to the user
-you can add a header or foot to the report body
-in there port body add the ff: Vehicle ID, VIN, Vehicle Gross Weight to do this right click the report layout and click insert. The object we will be inserting can be usually a text box, line, table, rectangle, list, image, chart etc.
-right click the outside of the report layout and click report properties to change the margin, paper size, paper orientation etc.


activity 7:
click path for the print management of Sales Order: accounts receivable > Setup > Forms > Form setup > Print management
click path for the print management of Purchases: accounts payable > Setup > Forms > Form setup > Print management

-from vehicle maintenance list page, create a button that will display vehicle information and list all maintnance details related on the selected vehicle
-how does the report somehow now what report to display based on the selected row


2 ways on how to modify report layout of a built in report (FOR REFACTORING)
-report layout can be modified on controller class by overriding the standard controller class
-report that uses print management can be modified by extending PrintMgmtReportFormatPopulator class to add new report layout and also by extending PrintMgmtDocType class to identify which report layout will be used depends on document type

-open in designer the built in VendPurchOrderJournal form
-search for the PurchPurchaseOrderOriginal menu item button in the design pattern tab either by usign the main explorer or AOT search engine
-open the menu item button in the designer or if used main explorer in searching right click the button and click go to menu item output PurchPurchaseOrderOriginal

-since a output menu item uses a control class we use the information that will be provided in the menu items properties as basis for us to search the name of the class in the AOT
-search the class name and view its code

-search for PurchPurchaseOrderDP class and view its code

-search for the PurchPurchaseOrder report 
-in its datasets node are the elements PurchPurchaseOrderLine and PurchPurchaseOrderDS, click the latter and see its query property
-the query is PurchPurchaseOrderDP.PurchPurchaseOrderHeader which is the method that uses the shall we say [SrsReportDatasetAttribute(tableStr(DBFMVehicleReportTable))] decorator
-note: whenever a method of a data provider class uses this decorator it is what is part of the list of all choices for the query property of a dataset of a report
-so search PurchPurchaseOrderHeader and create an extension for it. (This is a table BTW)
-create another string extended data type named DBFMDescription and add it in our extended table

-search use the <name> of teh <class name>DP class and the <class name>
-duplicate it in our project
-rename it
-in the PurchPurchaseOrderDS dataset of the datasets node restore it so we can see the field we added earlier in the table since this dataset depends on this table for its query property
-once done make sure to deploy reports

go to modules > accounts payable > purchase orders > all purchase orders > select a record > in the action pane tab select purchase > purchase order confirmations > in the preview/print select box select original preview or print management





Activity 8 (Pending):
We are tasked a problem: in the click path "modules > sales and marketing >  sales orders > all sales orders > action tab pane" select pick and pack. 
We then look for a record that has its field status set to invoiced or delivered. 
Once record is selected click packing slip journal (which is a display menu item that directs to the CustPackingSlipJournal the form that we are looking for that contains the output menu item button that directs to the report) once in the page follow again the click path preview/print > original preview, which will generate a report. This is the report that we need to customize
So this problem asks of us two things in order to edit the report: what report we need to edit and what table specifically does the report use for its header, body, and footer components?

We do not know the name of the table itself let alone the report, however we can do this by identifying what menu we are in based on the click path we had to follow to get to teh page which contains all the sales orders records
Because ew are in the sales and marketing module we can use these as keywords to search in the AOT what its menu name is. Once we find it we can right click it and select open in designer
Once in we can then use the main tab search filter to search what menu item specifically what output menu item directs to the form that contains the table that we need
Because we know what display menu item in the UI leads to the list of all sales orders based on the click path that we followed to access these list of all sales orders we can use its keywords as basis to search for that specific display menu item
Once we find a the display menu item that resembles "all sales orders" we can identify the value of its properties object and object type. And in here we can extract out the form that it leads to when clicked based on its object property
We use the name of this form as input for the search filter in the AOT and once we find the form we open it again in the designer
Because we have another form to go to that contains the dropdown list that directs to the report itself we have to search in this current form we have what display menu item does in fact lead to this form, in this case the click path to the display menu item is "pick and pack" > packing slip journal, that we use to search and then identify what form it uses
Once form is identified we search it again in the AOT and open it in the designer
We now search for the output menu item button in the form that directs to the report
Identify the value of the menu item name property of this button
Search the menu item name in the AOT, open it in the designer, identify the object and object type property values
The object value in particular will be the name of the controller class, and since the name usually for the controller class of a report is <name>Controller or <name>Controller.xpp for the file name, we can use the name to search for the data provider class and the report which usually have the names <name>DP/.xpp and <name> respectively which are the main objects that we will be working on
To know what method will be overriden in the data provider class we need to look for what query property values the report that uses for its dataset elements
Simultaneously we can search for the <name> report and open it again in the designer
Identify the query property values of the dataset elements (usually with the substring "DS" in its name) of the dataset node that the report uses to populate its data in the report design which is typically divided into the header, body, and footer datasets
Once identified the value will contain the <data provider class>.<report table> that we will need since it is the method that grants us access to the values that the report design uses
Because we now know what table to extend via the reutnr table type of method that is used by the query property of a dataset element in a report we create an extension of this table
We then add our field or drag an extended data type that we have in our solution to the fields ndoe of the extended table
We then save all our files, sync the database, clean the solution and then rebuild the solution
Once done we go back to our reports datasets, right click and select "restore" so that we can see the changes of these datasets based on the change we made to our extended table which we know is relied on by a dataset element
We will then see our newly added field and from there we can edit the designs of a report to add this newly added field to its layout perhaps through adding a textbox with its expression set to this new field as we usually do



for instance we wanted to override to override the data of the header of a report, we will have to then look for the method that returns this kind of table, and we will have to know if it is a method that is tailored to return data for the header of the repor


how to know what table the report uses??? Throught the data provider class or the reports datasets
also do when we do find out the dataset what if there are multiple datasets that rely on different tables?
Do I create an extension only for this temporary table or the table that encompasses these temporary tables, that contain all the fields that are partly used by these temporary tables e.g. SalesPackingSlipHeaderTmp or SalesPackingSlip?


file: SalesPackingSlipDBFMS_Extension.xpp
[ExtensionOf(classStr(SalesPackingSlipDP)]
final class SalesPackingSlipDPDBFMS_Extension
{
	// this si what populates the data of a temporary table of a report
	// like what we did in the this.populateData() method of our own data provider class
	// this returns a temporary table SalesPackingSlipHeaderTmp
	protected SalesPackingSlipHeaderTmp initializeSalesPackingSlipHeader()
	{
		SalesPackingSlipHeaderTmp salesPackingSlipHeaderTmpLocal = next initializeSalesPackingSlipHeader();
		
		salesPackingSlipHeaderTmpLocal.DBFMSReference = strFmt("%1-%2", 
			this.parmCustPackingSlipJour().SalesId, 
			this.parmCustPackingSlipJour().PackingSlipId);
		
		return salesPackingSlipHeaderTmpLocal;
	}
}


I think this is the main file which allows the user to choose between what print management report format to choose like what we did in the PurchPurchaseOrder report we had now two formats to choose from one was the 
file: PrintMgmtReportFormatPopulatorDBFMS_Extension
[ExtensionOf(classStr(PrintMgmtReportFormatPopulator))]
final class PrintMgmtReportFormatPopulatorDBFMS_Extension
{
	#PrintMgmtSetup

	protected void addDocuments()
	{
		this.addCustomReportDocuments();
		next addDocuments();
	}

	private void addCustomReportDocuments()
	{
		this.addOther(PrintMgmtDocumentType::SalesOrderPackingSlip, 
			ssrsReportStr(SalesPackingSlipDBFMS, ReportCustom), 
			ssrsReportStr(SalesPackingSlipDBFMS, ReportCustom), #NoCountryRegionId);
	}
}







Security basics
-sign in via AAD -> AAD redirects to AX7/dynamics 365 -> AX7/dynamics 365 start page display
-role based security comprises of duties, duties comprise of privileges (but security roles can also comprise of privileges), and privileges comprise of permissions which from your knowledge in django are the things that a user can do in a web application
-extensible data security framework comprise of a query, security policy, context and contrained tables
-users are assigned to one or more roles depending on their job that take into account the organization size, culture, and industry focus
-in designing roles it comprises of types and segregation categories

-create security duty
-add SysDataAreamaintain privilege

-buttons can have permissions like allow create, read, update, delete, partial update etc.
-table and form fields fields can also ahve permisisons like allow edit allow edit on create, mandatory, and minimum read access
-menu items also has permissions like read, correct, create, update, and delete permissions and has properties like permisison type, permission object child, linked permission object
-read -> correct -> update -> create -> delete is the heirarchy





DAY 7
Power BI
-consists of features like in-memory aggregate models, aggregate data entities, aggregate programming model, aggregate measurements and dimensions, and new KPI modelling
-types are contextual embedded, and self-service
-power BI can be a middle man between other I think MS appliciations. Could it be that this is like an API that allows dynamics 365 to integrate with other MS apps
-reporting services can be hoested in ms azure compute service, has a simplified development, administration and enhanced report viewing
-data sources can come from excel and sql databases or from d365
-power BI is just a data visualization tool like matplotlib
-https://usnconeboxax1aos.cloud.onebox.dynamics.com/data use this link for the Web API URL
Development process in power BI
-create reporting project in VS
-edit report in VS
-add report or I assume hook it to a menu item
-set menu item as start up object
-deploy report to server
-use ctrl + f5 to verify the report

Service and Integrations
-an X++ class can use yes SOAP, REST, and OData types of APIs. REST APIs in particular use HTTP/JSON data which I know.  OData is also a standard from Microsoft that relies on the REST Architecture to send specific types of messages over HTTP. The AtomPub protocol for instance is one of the best examples of REST API design. So, in a sense you are right - the OData is just another REST API and each OData implementation is a REST-ful web service. The difference is that OData is a specific protocol; REST is architecture style and design pattern.
-an X++ class can also access the Azure SQL database
-a data entity which depends on an X++ class, table, relational query, and an aggregate query can also access the Azure SQL database
-for the OData type of API it provides a simple and uniform way to share data in a discoverable fashion through uniform URL conventions. It also enables broad integration across other microsoft products and supports consumption in PowerBI.com as a refreshable data source

Workflows





Data entity
-is a de-normalized view of database tables
-provides a single stack to capture business logic
-provides primary mechanism to extract/insert datasets
-replaces diverging concepts of DIXF entities
-categories of data entities range from parameters, reference, master, document, and transaction
-is used mainly in synchronous services, asynchronous integration, data migration, and business intelligence


Activity 9:
-go to data management in the work spaces
-once in the page click data entities

-go to the VendGroup table in accounts payable > vendors
-in the page we will see a button open as (excel etc.)
-if it shows that the table acn be opened in excel then it is already a data entity

-for the next step follow the directory path C:/program files (x86)/microsoft sdks/azure/storage emulator
-open the AzureStorageEmulator.exe.config file
-change all the twos of the url attribute values of the three service elements to ones, maek sure to save the file as an administrator
-once done run the command AzureStorrageEmulator.exe init in the directory that contains the file we edited
-once done run the command AzureStorageEmulator.exe start


Activity 10:
-search RetailVendVendorV3Staging
-add Dimensions and Ledger package to our model in order to use the RetailVendVendorV3Staging and RetailVendVendorV3Entity objects

-create extension of FMRental by adding a cluster index vehicleid service start date and service end date
-add a cluster index vehicle id servie start and end dates to the DBFMVehicleMaintenance table, and set the "primary index" property value to the newly created index 
-extend the entity FMRental
-find references of the FMRental table in order to find the entity that uses this table
-once entity is found open in designer and find its staging table which we know every entity has
-add custom fields on entity
-open FMRentalStaging
-add custom fields on staging table
-follow necessary protocol after 
-open the excel and add tables DBFMVehicleMaintenanceEntity and FMRentalEntity in our excel sheet



















weaknesses:
difficulty wrapping my head around sql select statements, since the variable used to represent a table is used also to take in the would be value of the selected rows of a table
- why a variable is without instantiation to a table is because that variable anyway will hold a specific entity instance of the table by virtue of using the select statement
- unlike select statements in sql select statements in x++ only return one instance of an entity
-fields in tables and forms by default just set the tables properties to yoru master values and then if you are going to let the user edit something or create or delete then set these on the forms object instead. Instead of always having to change the master property values of a table
overrriding methods and accessing the tables or forms within overriden methods of tables and forms
architecture of the whole system
-overriding existing reports





Unfortunate errors that are occuring in the project:
-refreshing data entity list takes too long? FIX: 1. sync database via solution explorer
-can't move on to exporting a data entity
-can't move on to using excel and SQL service management because of not being able to export data entity





to do:
exporting projects
AOT search filter > t:model: <model name e.g. DevelopmentBasicsFMS > right click AOT > add search result to new project > set name for project e.g. CDSI_Rockwell
right click project in solution explorer > export project > set name for file


Version Control
Azure DevOps Version Control - like GitHub
Commands:
get latest
if we check in on source codes we put a short description with the update we have made/"committed"

source code for fiannce and operattions is primarly in XML files that make up the AOT
DevOps accoutns are for free like Github

also has branches that we can merge with other branches perhaps a master branch that is very much akin to Git

UNDER PENDING CHANGES
if a file in the commit is not related to another file that has been changed
then right click and click exclude
format for comment: [initials e.g. LRC][work item id][task name][short descr of what changed or added in the source code]
work related items - represents the tasks that are needed to be done for the project admin will give work id: [work item id]
"project" change to "for deployment" then tag the admin or the owner of the repo (Daniel Bon)
commit only to a development branch

for development treat dev envs as disposable
always get latest before updating source code to avoid code conflict this is before starting to code always. Equivalent to git pull
only include changes from one feature in each changeset/commit
shelve changes to keep work safe. Not saved in local only but already committed in the repo

click shelve > add [initials e.g. LMC][work item id][task name][short descr of what changed or added in the source code]
retain check if you want to return changes


syncing to the CDSI model
create a model
select rockwell for referenced package and check CDSIRockwell [CDSI_Rockwell], DTAXRockwell [DTAXRockwell], FlexRockwell [FlexRockwell]
click next and check build pre-compiled form, build reports, synchronize database, build cross referenced data

Unable to find the certificate with the given thumbprint. Please use the thumbprint of an existing trusted certificate to get security token.. isLocalMode: False; useReportingCluster: False; thumbPrint: 38DAB993EA2C46254D5A878D4BBEB601F9148BD7; currentProcess: ReportingServicesService;

1. Open the file in notepad > C:\AOSService\Webroot\wif.services.config

2. Find the following line and copy the thumbprint :
<certificateReference x509FindType="FindByThumbprint" findValue="0164D3744C633D8C0C641961F5FBE57D382B15E4" />

3. Open notepad as Admin. Open the file > C:\Program Files\Microsoft SQL Server Reporting Services\SSRS\ReportServer\bin\ReportPVMConfiguration.xml

4. Replace thumbprint with the thumbprint from wif.services.config and save.
<ReportingClientCertificateThumbprint>6CDC778ADC1823FCE1E63C837270232A4E520676</ReportingClientCertificateThumbprint>

5. Run Powershell as admin
iisreset /restart
Stop-Service -Name DynamicsAxBatch
Start-Service -Name DynamicsAxBatch





break 12:47
end 1:34





​
Salutation
Good evening Maam/Sir

introduction
this is <insert name>

body
This is Larry Miguel Cueva po, just wanted to pass my updated version of last weeks activity report for the practicum

closing



